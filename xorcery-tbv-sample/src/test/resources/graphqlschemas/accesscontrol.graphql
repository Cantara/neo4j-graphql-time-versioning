directive @domain on OBJECT

directive @link on FIELD_DEFINITION

directive @virtual on FIELD_DEFINITION

directive @index on FIELD_DEFINITION

type User @domain {
  # e.g. 'path.to.dataset'
  id: String!
  name: String!
  group: [Group!] @link
}

type Group @domain {
  # e.g. 'path.to.dataset$fieldName'
  id: String!
  name: String!
  parent: [Group!] @link
  smart: [Group!] @virtual @cypher(statement: "MATCH (this) CALL tbv.path.expand(this,'parent','+Group',-1,-1,ver) YIELD path RETURN last(nodes(path)) AS n")
  ancestors: [Group!] @virtual @cypher(statement: "MATCH (this) CALL tbv.path.expand(this,'parent>','+Group',-1,-1,ver) YIELD path WHERE last(nodes(path)) <> this RETURN last(nodes(path)) AS n")
  descendants: [Group!] @virtual @cypher(statement: "MATCH (this) CALL tbv.path.expand(this,'<parent','+Group',-1,-1,ver) YIELD path WHERE last(nodes(path)) <> this RETURN last(nodes(path)) AS n")
  smartGraph: [GroupGraphEdge!] @virtual @cypher(statement: """
    MATCH (this)
    CALL tbv.path.expand(this,'parent','+Group',-1,-1,ver) YIELD path
    WITH apoc.path.elements(path) AS elems
    UNWIND range(0, size(elems)-4) AS i
    WITH elems, i
    WHERE i % 4 = 0
    WITH DISTINCT i, elems[i] AS instance1, elems[i+1] AS rel1, elems[i+2] AS resource, elems[i+3] AS rel2, elems[i+4] AS instance2
    RETURN CASE type(rel2)
      WHEN 'VERSION_OF' THEN {fromId: instance1.id, toId: instance2.id}
      ELSE {fromId: instance2.id, toId: instance1.id}
    END AS n
  """)
}

type GroupGraphEdge {
  fromId: String!
  toId: String!
}

#An RFC-3339 compliant Full Date Scalar
scalar Date

#An RFC-3339 compliant DateTime Scalar
scalar DateTime

#An RFC-3339 compliant Full Time Scalar
scalar Time

type Query {
}
